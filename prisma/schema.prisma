generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:postgres@localhost:5432/rayofcare"
}

model User {
    id               String             @id @default(uuid())
    email            String             @unique
    auth0id          String             @unique
    roles            UserRoles[]
    caregiverProfile CaregiverProfile?
    guardianProfile  GuardianProfile?
    // clientProfile    Client? //TODO: If Guardian is creating profile for Client, also create client user login.
    ClientGuardians  ClientGuardians[]
    ClientCaregivers ClientCaregivers[]
}

// model Role {
//     id    String      @id @default(uuid())
//     role  String      @unique
//     users UserRoles[]
// }
enum UserRole {
    guardian
    caregiver
    client
    user
}

model UserRoles {
    user   User     @relation(fields: [userId], references: [id])
    userId String
    // role   Role   @relation(fields: [roleId], references: [id])
    // roleId String
    role   UserRole @default(user)

    @@id([userId, role])
}

model CaregiverProfile {
    userId    String  @id
    user      User    @relation(fields: [userId], references: [id])
    firstName String
    lastName  String
    line1     String
    line2     String?
    city      String
    state     String
    zipcode   String
    homePhone String?
    cellPhone String
}

model GuardianProfile {
    userId    String  @id
    user      User    @relation(fields: [userId], references: [id])
    firstName String
    lastName  String
    line1     String
    line2     String?
    city      String
    state     String
    zipcode   String
    homePhone String?
    cellPhone String
}

model Client {
    id               String             @id @default(uuid())
    firstName        String
    lastName         String
    line1            String
    line2            String
    city             String
    state            String
    zipcode          String
    homePhone        String
    cellPhone        String
    story            String
    gender           ClientGender       @default(other)
    dob              String
    //*add a new table ClientNotes so you can have multiple
    //! who has access to add or change?
    clientGuardians  ClientGuardians[]
    clientCaregivers ClientCaregivers[]
}

enum ClientGender {
    male
    female
    other
}

model ClientGuardians {
    client   Client @relation(fields: [clientId], references: [id])
    clientId String
    userId   String
    user     User   @relation(fields: [userId], references: [id])

    @@id([clientId, userId])
}

model ClientCaregivers {
    client   Client @relation(fields: [clientId], references: [id])
    clientId String
    userId   String
    user     User   @relation(fields: [userId], references: [id])

    @@id([clientId, userId])
}

// // model ClientNotes {
// //     id       String @id @default(uuid())
// //     client   Client @relation(fields: [clientId], references: [id])
// //     clientId String
// //     note     String
//     //*archive flag, status, soft delete or deactivate for notes that are no longer relevant and filtering
// }
